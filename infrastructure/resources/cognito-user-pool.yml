Resources:
  # The User pool

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      # Generate a name based on the stage
      UserPoolName: test-user-pool
      # Set email as an alias
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: firstName
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: lastName
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: organization
          AttributeDataType: String
          Mutable: true
          Required: false
      EmailVerificationSubject: 'TECH COE Verification Code'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 5

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      # Generate an app client name based on the stage
      ClientName: test-user-pool-client
      UserPoolId:
        Ref: CognitoUserPool
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      GenerateSecret: false
      CallbackURLs:
        - 'http://localhost:4200/'
        - 'http://localhost:4200/login/'
      DefaultRedirectURI: 'http://localhost:4200/'
      LogoutURLs:
        - 'http://localhost:4200/'
        - 'http://localhost:4200/login/'
      AllowedOAuthFlows: 
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - aws.cognito.signin.user.admin
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - Google
        - COGNITO

  UserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties: 
      AttributeMapping: 
        email: "email"
      ProviderDetails: 
        client_id: ${self:provider.environment.CLIENT_ID}
        client_secret: ${self:provider.environment.CLIENT_SECRET}
        authorize_scopes: "profile email openid"
      ProviderName: Google
      ProviderType: Google
      UserPoolId: 
        Ref: CognitoUserPool

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:         
      Domain: ${self:provider.environment.DOMAIN}
      UserPoolId:
        Ref: CognitoUserPool

# Print out the Id of the User Pool that is created
Outputs:
  UserPoolId:
    Value:
      Ref: CognitoUserPool

  UserPoolClientId:
    Value:
      Ref: CognitoUserPoolClient
